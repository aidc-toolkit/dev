name: Release

on:
  workflow_call:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}
          registry-url: https://registry.npmjs.org/

      - name: Checkout
        uses: actions/checkout@v4

      - name: Start terminal session (pre build)
        if: vars.TERMINAL_PRE_BUILD == 'true'
        uses: mxschmitt/action-tmate@v3

      - name: Build
        id: build
        run: |
          # Get the name property.
          name=`grep "^  \"name\": " package.json | cut -d "\"" -f4 -s`
          
          # Get the version property.
          version=`grep "^  \"version\": " package.json | cut -d "\"" -f4 -s`
          
          # Get the tag on the version property if any, minus pre-release identifier if any.
          tag=`echo $version | cut -d "-" -f2 -s | cut -d "." -f1`
          
          # Save the properties for future steps.
          echo "name=$name" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

          npm install
          
          # If release is not official, build in development mode.
          if [[ $tag != "" ]]
          then
            npm run build:dev
          else
            npm run build:release
          fi

      - name: Start terminal session (post build)
        if: vars.TERMINAL_POST_BUILD == 'true'
        uses: mxschmitt/action-tmate@v3

      - name: Test
        run: |
          # Run test script if present.
          npm run test --if-present

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        run: |
          name="${{ steps.build.outputs.name }}"
          version="${{ steps.build.outputs.version }}"
          tag="${{ steps.build.outputs.tag }}"
          
          # If release is not official, tag it with the release phase.
          if [[ $tag != "" ]]
          then
            tag_args="--tag $tag"
          fi
          
          if [[ "${{ github.event_name }}" != "release" ]]
          then
            dry_run_arg="--dry-run"
          fi
          
          # Create .npmignore to exclude hidden directories.
          echo /.\*/ > .npmignore
          
          npm publish --access public $tag_args $dry_run_arg

          # Make a tagged version 0 the latest.
          if [[ $tag != "" && $version =~ ^0 ]]
          then
            npm dist-tag add $name@$version latest $dry_run_arg
          fi
